flowchart TD
    subgraph FR1["User Registration"]
        reg_form["Design registration form UI"]
        email_val["Implement email validation"]
        user_schema["Create user database schema"]
        reg_api["Develop registration API"]
        reg_verify["Build email verification system"]
        role_mgmt["Set up user role management"]
        reg_security["Implement security measures"]
        reg_error["Create error handling"]
        reg_analytics["Build registration analytics"]

        user_schema --> reg_api
        reg_form --> email_val
        email_val --> reg_verify
        reg_api --> reg_error
        reg_security --> reg_api
        role_mgmt --> reg_api
        reg_api --> reg_analytics
    end

    subgraph FR2["User Sign-In"]
        login_ui["Design login interface"]
        auth_sys["Implement authentication system"]
        session_mgmt["Create session management"]
        signin_api["Develop sign-in API"]
        token_val["Build token validation"]
        security_log["Implement security logging"]
        twofa_sys["Set up 2FA system"]
        login_monitor["Create login monitoring"]
        auto_timeout["Build automatic timeout"]

        login_ui --> auth_sys
        auth_sys --> signin_api
        signin_api --> session_mgmt
        token_val --> signin_api
        security_log --> login_monitor
        twofa_sys --> auth_sys
        session_mgmt --> auto_timeout
    end

    subgraph FR3["Data Collection"]
        workflow_design["Design data collection workflow"]
        scrape_sys["Implement web scraping system"]
        class_schema["Create classroom database schema"]
        collect_api["Develop data collection API"]
        valid_check["Build validation checks"]
        error_log["Set up error logging"]
        data_backup["Implement data backup"]
        collect_monitor["Create collection monitoring"]
        dash_analytics["Build dashboard analytics"]

        workflow_design --> scrape_sys
        class_schema --> collect_api
        scrape_sys --> collect_api
        valid_check --> collect_api
        collect_api --> error_log
        error_log --> collect_monitor
        collect_monitor --> dash_analytics
        collect_api --> data_backup
    end

    subgraph FR4["Availability Display"]
        map_ui["Design interactive map UI"]
        realtime_update["Implement real-time updates"]
        list_interface["Create list view interface"]
        display_api["Develop display API"]
        filter_sys["Build filtering system"]
        error_handle["Set up error handling"]
        view_sync["Implement view synchronization"]
        load_indicate["Create loading indicators"]
        search_func["Build search functionality"]

        map_ui --> display_api
        list_interface --> display_api
        realtime_update --> view_sync
        filter_sys --> display_api
        display_api --> error_handle
        display_api --> load_indicate
        search_func --> filter_sys
    end

    subgraph FR5["Profile Management"]
        profile_ui["Design profile interface"]
        pref_sys["Implement preferences system"]
        profile_schema["Create profile database schema"]
        profile_api["Develop profile API"]
        valid_sys["Build validation system"]
        profile_error["Set up error handling"]
        privacy_ctrl["Implement privacy controls"]
        audit_log["Create audit logging"]
        profile_analytics["Build profile analytics"]

        profile_schema --> profile_api
        profile_ui --> pref_sys
        pref_sys --> profile_api
        valid_sys --> profile_api
        profile_api --> profile_error
        privacy_ctrl --> profile_api
        profile_api --> audit_log
        audit_log --> profile_analytics
    end

    subgraph FR6["Notifications"]
        notif_ui["Design notification UI"]
        push_notif["Implement push notifications"]
        notif_db["Create notification database"]
        notif_api["Develop notification API"]
        delivery_val["Build delivery validation"]
        notif_error["Set up error handling"]
        pref_ctrl["Implement preference controls"]
        notif_log["Create notification logs"]
        notif_analytics["Build analytics system"]

        notif_db --> notif_api
        push_notif --> notif_api
        delivery_val --> notif_api
        notif_api --> notif_error
        pref_ctrl --> push_notif
        notif_api --> notif_log
        notif_log --> notif_analytics
    end

    subgraph FR7["Location Services"]
        loc_ui["Design location interface"]
        geo_sys["Implement geolocation system"]
        loc_db["Create location database"]
        loc_api["Develop location API"]
        dist_calc["Build distance calculations"]
        loc_error["Set up error handling"]
        loc_privacy["Implement privacy controls"]
        loc_track["Create location tracking"]
        prox_alerts["Build proximity alerts"]

        geo_sys --> loc_api
        loc_db --> loc_api
        dist_calc --> loc_api
        loc_api --> loc_error
        loc_privacy --> loc_track
        loc_track --> prox_alerts
    end

    subgraph FR8["Activity Feed"]
        feed_ui["Design activity feed UI"]
        realtime_feed["Implement real-time updates"]
        activity_db["Create activity database"]
        feed_api["Develop feed API"]
        content_filter["Build content filtering"]
        mod_sys["Set up moderation system"]
        feed_privacy["Implement privacy controls"]
        activity_log["Create activity logging"]
        engage_analytics["Build engagement analytics"]

        activity_db --> feed_api
        realtime_feed --> feed_api
        content_filter --> mod_sys
        feed_api --> activity_log
        feed_privacy --> feed_api
        activity_log --> engage_analytics
    end

    %% Cross-functional dependencies
    user_schema --> auth_sys
    reg_api --> auth_sys
    auth_sys --> profile_api
    loc_api --> display_api
    profile_api --> notif_api
    collect_api --> display_api
    feed_api --> notif_api
    loc_privacy --> feed_privacy
    realtime_update --> realtime_feed
    class_schema --> activity_db